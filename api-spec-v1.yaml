openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/matthewminish/seng302-2021-api-spec/1.0.0
    
info:
  description: API specification for the SENG302 2021 project
  version: "1.0.0"
  title: Wasteless
  contact:
    email: seng302@canterbury.ac.nz
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
tags:
  # User stories
  - name: 'U1: Registering and logging into an individual account'
  - name: 'U2: Cities, States/Regions, Countries'
    description: 'This story is implemented inside the client alone, and as such requires no associated API endpoints to be created'
  - name: 'U3: Searching for Users using Name'
  - name: 'U4: Default Global Application Admin (DGAA)'
  - name: 'U5: Creating Business Accounts'
  - name: 'U6: Acting as Individual or Business'
    description: 'All necessary API endpoints are found in prior stories'
  - name: 'U7: Create and display Products'
  # Entities
  - name: 'Users'
    description: 'Grouping of endpoints related to the User entity'
  - name: 'Business Accounts'
    description: 'Grouping of endpoints related to Business Accounts'
  - name: 'Products'
    description: 'Grouping of endpoints related to Product entities'
  
security: 
  - CookieAuth: 
    - user
    - globalApplicationAdmin
    - defaultGlobalApplicationAdmin
    
paths:
  '/login':
    post:
      tags:
      - 'U1: Registering and logging into an individual account'
      - 'Users'
      summary: Attempt to authenticate a user account with a username and password
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email address of user account for login attempt
                  example: johnsmith99@gmail.com
                password:
                  type: string
                  format: password
                  description: Plain text user password
                  example: '1337-H%nt3r2'
      responses:
        '200': 
          $ref: '#/components/responses/AuthenticatedResponse' 
        '400':
          description: Failed login attempt, email or password incorrect
          
  '/users':
    post:
      tags:
        - 'U1: Registering and logging into an individual account'
        - 'Users'
      summary: Create a new user account
      security: []
      responses:
        '201':
          description: Account created successfully
        '400': 
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '409':
          description: Email address already in use
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: New user account data, id will be generated automatically by the server
        
  '/users/{id}':
    get:
      tags:
        - 'U1: Registering and logging into an individual account'
        - 'Users'
      summary: Retrieve a specific user account
      security: 
        - CookieAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406': 
          $ref: '#/components/responses/NotAcceptableError'
          
  '/users/search':
    get:
      tags:
        - 'U3: Searching for Users using Name'
        - 'Users'
      summary: 'Search for users by some criteria, for now: their name'
      security: 
        - CookieAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      parameters: 
        - in: query
          name: searchQuery
          schema:
            type: string
          required: true
          description: 'Criteria to search users for, e.g: userâ€™s full name or one or more of their names/nickname'
      responses:
        '200':
          description: Request successful, a (possibly empty) list of users is returned
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      
  '/users/{id}/makeAdmin':
    put:
      tags:
        - 'U4: Default Global Application Admin (DGAA)'
        - 'Users'
      summary: Promote a user account to the Global Application Admin role
      security: 
        - CookieAuth:
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Action completed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '406': 
          $ref: '#/components/responses/NotAcceptableError'
          
  '/users/{id}/revokeAdmin':
    put:
      tags:
        - 'U4: Default Global Application Admin (DGAA)'
        - 'Users'
      summary: Revokes the Global Application Admin role from a user account
      security: 
        - CookieAuth:
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Action completed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403': # 409 thrown if dgaa tries to revoke their own access
          $ref: '#/components/responses/ForbiddenError'
        '406': 
          $ref: '#/components/responses/NotAcceptableError'
          
  '/businesses':
    post:
      tags:
      - 'U5: Creating Business Accounts'
      - 'Business Accounts'
      summary: Create a new business entity
      security: 
        - CookieAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
        description: New business account data, id will be generated automatically by the server
      responses:
        '201':
          description: Business account created successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  '/businesses/{id}':
    get:
      tags:
        - 'U5: Creating Business Accounts'
        - 'Business Accounts'
      summary: Retrieve a specific business account
      security: 
        - CookieAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Business retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406': 
          $ref: '#/components/responses/NotAcceptableError'
 
  '/products/{id}':
    get:
      tags:
        - 'U7: Create and display Products'
        - 'Products'
      summary: Retrieve a specific product
      security: 
        - CookieAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: 'Forbidden: Returned when trying to access a product that is inactive or expired, and is not owned by the user making the request.'
        '406': 
          $ref: '#/components/responses/NotAcceptableError'
          
  '/businesses/{id}/products':
    get:
      tags:
        - 'U7: Create and display Products'
        - 'Business Accounts'
        - 'Products'
      summary: Retrieve the products of a business account
      security: 
        - CookieAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Products retrieved successfully. This could be an empty array, if the user making the request is not an administrator of the business (or a global application admin) then only return the "public" products: i.e those that are active and not expired.'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406': 
          $ref: '#/components/responses/NotAcceptableError'
    post:
      tags:
        - 'U7: Create and display Products'
        - 'Products'
        - 'Business Accounts'
      summary: Create a new product for a business account
      security: 
        - CookieAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      responses:
        '201':
          description: Product created successfully
        '400': 
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '403':
          description: 'Forbidden: Returned when a user tries to add a product to business they do not administer AND the user is not a global admin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        description: New product entity data, id will be generated automatically by the server
          
          
  '/users/{id}/products':
    get:
      tags:
        - 'U7: Create and display Products'
        - 'Users'
        - 'Products'
      summary: Retrieve the products of a user account
      security: 
        - CookieAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Products retrieved successfully. This could be an empty array, if the user making the request is not the same user for which the products are being requested (i.e someone requesting their own products) then only return the "public" products: i.e those that are active and not expired.'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406': 
          $ref: '#/components/responses/NotAcceptableError'
          
    post:
      tags:
        - 'U7: Create and display Products'
        - 'Products'
        - 'Users'
      summary: Create a new product for a user account
      security: 
        - CookieAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      responses:
        '201':
          description: Product created successfully
        '400': 
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '403':
          description: 'Forbidden: Returned when a user tries to add a product for another user other than themselves AND the user is not a global admin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        description: New product entity data, id will be generated automatically by the server
 
components:
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: The user does not have permission to perform the requested action
    NotAcceptableError:
      description: 'The requested route does exist (so not a 404) but some part of the request is not acceptable, for example trying to access a resource by an ID that does not exist.'
    AuthenticatedResponse:
      description: >
        Response returned to client when they have performed an action to gain authentication (registering or logging in).
        This response includes a session token that the client can use in future API requests to authenticate itself. 
        This session token is set as a cookie with name 'JSESSIONID', and will need to be included in subsequent requests to the server.
      headers: 
        Set-Cookie:
          schema: 
            type: string
            example: JSESSIONID=abcde12345; Path=/; HttpOnly

  schemas:
    Product:
      type: object
      description: Entity for items that are available to be sold / purchased through the application
      required:
        - name
        - quantity
        - totalPrice
        - expires
      properties:
        id: 
          type: integer
          example: 100
          readOnly: true
        quantity:
          type: integer
          example: 5
        pricePerItem:
          type: number
          format: double
          description: Price to purchase a single item of the product
        totalPrice:
          type: number
          format: double
          description: Price for purchasing the entire stock of the product
        manufactured:
          type: string
          format: date
          description: The date on which the product was prepared / manufactured.
        sellBy:
          type: string
          format: date
          description: The date by which the product ought to be sold
        bestBefore:
          type: string
          format: date
          description: 'The "best before" date of the product'
        expires:
          type: string
          format: date
          description: The expiry date of the product
        status:
          type: string
          readOnly: true
          description: 'A products status. Active and inactive can be set by the creator - but expired is set automatically after the expiry date'
          enum:
            - active
            - inactive
            - expired
        created:
          type: string
          format: date-time
          readOnly: true
          description: The date and time when this product was created on the server. This field is generated automatically by the server.
        creator:
          $ref: '#/components/schemas/User'
      
    Business: 
      type: object
      description: Business account entity
      required:
        - name
        - address
        - businessType
      properties:
        id:
          type: integer
          example: 100
          readOnly: true
          description: Automatically generated and assigned by the server
        administrators:
          type: array
          items: 
            $ref: '#/components/schemas/User'
          readOnly: true
        name:
          type: string
          example: 'Lumbridge General Store'
        description:
          type: string
          example: 'A one-stop shop for all your adventuring needs'
        address:
          type: string
          example: '92 River Lum Road, Lumbridge, Misthalin'
        businessType:
          type: string
          enum: 
            - Accommodation and Food Services
            - Retail Trade
            - Charitable organisation
            - Non-profit organisation
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:52:00Z'
          readOnly: true
          description: Date and time when the account was created

    User:
      type: object
      description: Basic user entity
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
        - homeAddress
        - password
      properties:
        id:
          type: integer
          example: 100
          readOnly: true
          description: Automatically generated and assigned by the server
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        middleName:
          type: string
          example: Hector
        nickname:
          type: string
          example: Jonny
        bio:
          type: string
          example: Likes long walks on the beach
        email:
          type: string
          format: email
          example: johnsmith99@gmail.com
        dateOfBirth:
          type: string
          format: date
          example: '1999-04-27'
        phoneNumber:
          type: string
          example: '+64 3 555 0129'
        homeAddress:
          type: string
          example: '4 Rountree Street, Upper Riccarton'
        password:
          type: string
          example: '1337-H%nt3r2'
          format: password
          writeOnly: true
          description: Should not be stored in plain text (i.e hash it)
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the account was created
        role:
          type: string
          readOnly: true
          description: '(Implemented in U4): This property should only be shown to Global Application Admins'
          enum:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin
        businessesAdministered:
          type: array
          readOnly: true
          description: '(Implemented in U6): A list of IDs of business accounts for which the user is an administrator'
          example: [12,42,99]
          items:
            type: integer