openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/matthewminish/seng302-2021-api-spec/1.0.0
    
info:
  description: API specification for the SENG302 2021 project
  version: "1.0.0"
  title: Reduced To Clear
  contact:
    email: seng302@canterbury.ac.nz
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
tags:
  # User stories
  - name: 'U1: Registering and logging into an individual account'
  - name: 'U2: Cities, States/Regions, Countries'
    description: 'This story is implemented inside the client alone, and as such requires no associated API endpoints to be created'
  - name: 'U3: Searching for Users using Name'
  - name: 'U4: Default Global Application Admin (DGAA)'
  - name: 'U5: Creating Business Accounts'
  # Entities
  - name: 'Users'
    description: 'Grouping of endpoints related to the User entity'
  - name: 'Business Accounts'
    description: 'Grouping of endpoints related to Business Accounts'
  
security: 
  - BearerAuth: 
    - user
    - globalApplicationAdmin
    - defaultGlobalApplicationAdmin
    
paths:
  '/login':
    post:
      tags:
      - 'U1: Registering and logging into an individual account'
      - 'Users'
      summary: Attempt to authenticate a user account with a username and password
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email address of user account for login attempt
                  example: johnsmith99@gmail.com
                password:
                  type: string
                  format: password
                  description: Plain text user password
                  example: '1337-H%nt3r2'
      responses:
        '200': 
          $ref: '#/components/responses/AuthenticatedResponse' 
        '400':
          description: Failed login attempt, email or password incorrect
          
  '/users':
    post:
      tags:
        - 'U1: Registering and logging into an individual account'
        - 'Users'
      summary: Create a new user account
      security: []
      responses:
        '201':
          description: Account created successfully
        '400': 
          description: There was some error with the data supplied by the user, appropriate error message(s) should be shown to user
        '409':
          description: Email address already in use
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: New user account data, id will be generated automatically by the server
        
  '/users/{id}':
    get:
      tags:
        - 'U1: Registering and logging into an individual account'
        - 'Users'
      summary: Retrieve a specific user account
      security: 
        - BearerAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  '/users/search':
    get:
      tags:
        - 'U3: Searching for Users using Name'
        - 'Users'
      summary: 'Search for users by some criteria, for now: their name'
      security: 
        - BearerAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      parameters: 
        - in: query
          name: searchQuery
          schema:
            type: string
          required: true
          description: 'Criteria to search users for, e.g: userâ€™s full name or one or more of their names/nickname'
      responses:
        '200':
          description: Request successful, a (possibly empty) list of users is returned
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      
  '/users/{id}/makeAdmin':
    put:
      tags:
        - 'U4: Default Global Application Admin (DGAA)'
        - 'Users'
      summary: Promote a user account to the Global Application Admin role
      security: 
        - BearerAuth:
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Action completed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  '/users/{id}/revokeAdmin':
    put:
      tags:
        - 'U4: Default Global Application Admin (DGAA)'
        - 'Users'
      summary: Revokes the Global Application Admin role from a user account
      security: 
        - BearerAuth:
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Action completed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  '/businesses':
    post:
      tags:
      - 'U5: Creating Business Accounts'
      - 'Business Accounts'
      summary: Create a new business entity
      security: 
        - BearerAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
        description: New business account data, id will be generated automatically by the server
      responses:
        '201':
          description: Business account created successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  '/businesses/{id}':
    get:
      tags:
        - 'U5: Creating Business Accounts'
        - 'Business Accounts'
      summary: Retrieve a specific business account
      security: 
        - BearerAuth:
          - user
          - globalApplicationAdmin
          - defaultGlobalApplicationAdmin
      parameters:
        - name: id
          in: path
          description: Business ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Business retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
 
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: The user does not have permission to perform the requested action
    NotFoundError:
      description: Requested resource not found on the server
    AuthenticatedResponse:
      description: >
        Response returned to client when they have performed an action to gain authentication (registering or logging in).
        This response includes a bearer token that the client can use in future API requests to authenticate itself
      content:
        application/json:
          schema:
            type: object
            properties:
              bearerToken:
                type: string
                description: Secret token returned by server to client for future authentication
                example: '8Zz5tw0Ionm3XPZZfN0NOml3z9FMfmpgXwovR9fp6ryDIoGRM8EPHAB6iHsc0fb'
                
  schemas:
    Business:
      type: object
      description: Business account entity
      required:
        - name
        - address
        - businessType
      properties:
        id:
          type: integer
          example: 100
          readOnly: true
          description: Automatically generated and assigned by the server
        administrators:
          type: array
          items: 
            $ref: '#/components/schemas/User'
          readOnly: true
        name:
          type: string
          example: 'Lumbridge General Store'
        description:
          type: string
          example: 'A one-stop shop for all your adventuring needs'
        address:
          type: string
          example: '92 River Lum Road, Lumbridge, Misthalin'
        businessType:
          type: string
          enum: 
            - Accommodation and Food Services
            - Retail Trade
            - Charitable organisation
            - Non-profit organisation
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:52:00Z'
          readOnly: true
          description: Date and time when the account was created
          
    User:
      type: object
      description: Basic user entity
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
        - homeAddress
      properties:
        id:
          type: integer
          example: 100
          readOnly: true
          description: Automatically generated and assigned by the server
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        middleName:
          type: string
          example: Hector
        nickname:
          type: string
          example: Jonny
        bio:
          type: string
          example: Likes long walks on the beach
        email:
          type: string
          format: email
          example: johnsmith99@gmail.com
        dateOfBirth:
          type: string
          format: date
          example: '1999-04-27'
        phoneNumber:
          type: string
          example: '+64 3 555 0129'
        homeAddress:
          type: string
          example: '4 Rountree Street, Upper Riccarton'
        password:
          type: string
          example: '1337-H%nt3r2'
          format: password
          writeOnly: true
          description: Should not be stored in plain text (i.e hash it)
        created:
          type: string
          format: date-time
          example: '2020-07-14T14:32:00Z'
          readOnly: true
          description: Date and time when the account was created
        role:
          type: string
          readOnly: true
          description: This property should only be shown to Global Application Admins (U4)
          enum:
            - user
            - globalApplicationAdmin
            - defaultGlobalApplicationAdmin